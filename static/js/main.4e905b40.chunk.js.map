{"version":3,"sources":["QuoteBox.js","App.js","serviceWorker.js","index.js"],"names":["QuoteBox","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fetchQuotes","fetch","then","resp","json","setState","quotes","chosenQuote","Math","floor","random","catch","error","console","log","resetQuote","state","quote","author","react_default","a","createElement","id","className","href","concat","data-size","target","onClick","React","Component","App","QuoteBox_QuoteBox","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oMAGqBA,oBACnB,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KASRQ,YAAc,WAEZC,MADO,0IAEJC,KAAK,SAAAC,GAAI,OAAIA,EAAKC,SAClBF,KAAK,SAAAC,GAAI,OAAIV,EAAKY,SAAS,CAC1BC,OAAQH,EAAKG,OACbC,YAAaJ,EAAKG,OAAOE,KAAKC,MAAsB,IAAhBD,KAAKE,eAG5CC,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,MAnBZnB,EAqBlBsB,WAAa,WACXtB,EAAKY,SAAS,CACZE,YAAad,EAAKuB,MAAMV,OAAOE,KAAKC,MAAsB,IAAhBD,KAAKE,YAAoB,CACjEO,MAAO,kCACPC,OAAQ,UAvBZzB,EAAKuB,MAAQ,CACXV,OAAQ,GACRC,YAAa,CACXU,MAAO,kCACPC,OAAQ,QANIzB,mFA8BhBG,KAAKI,+CAGL,OACEmB,EAAAC,EAAAC,cAAA,WAASC,GAAG,aACVH,EAAAC,EAAAC,cAAA,WAASC,GAAG,QAAQ1B,KAAKoB,MAAMT,YAAYU,OAC3CE,EAAAC,EAAAC,cAAA,WAASC,GAAG,UAAZ,MAAyB1B,KAAKoB,MAAMT,YAAYW,QAChDC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cACbJ,EAAAC,EAAAC,cAAA,KACIE,UAAU,uBAAuBD,GAAG,cACpCE,KAAI,yCAAAC,OAA2C7B,KAAKoB,MAAMT,YAAYU,MAAlE,OAAAQ,OAA6E7B,KAAKoB,MAAMT,YAAYW,QACxGQ,YAAU,QACVC,OAAO,UAJX,SAOAR,EAAAC,EAAAC,cAAA,UAAQC,GAAG,YAAYM,QAAShC,KAAKmB,YAArC,sBA9C4Bc,IAAMC,YCuB7BC,cArBb,SAAAA,EAAYvC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAmC,IAChBtC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqC,GAAAhC,KAAAH,KAAMJ,KACDwB,MAAQ,GAFGvB,wEAKhB,OACE0B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,qCAEFF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACW,EAAD,OAEFb,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,oBAAWF,EAAAC,EAAAC,cAAA,KAAGG,KAAK,6BAAR,6BAfHM,aCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,KAAK,SAAA4C,GACjCA,EAAaC","file":"static/js/main.4e905b40.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nexport default class QuoteBox extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      quotes: [],\n      chosenQuote: {\n        quote: \"Sorry, not able to find quotes.\",\n        author: \"N/A\"\n      }\n    }\n  }\n  fetchQuotes = () => {\n    let api = `https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json`\n    fetch(api)\n      .then(resp => resp.json())\n      .then(resp => this.setState({\n        quotes: resp.quotes,\n        chosenQuote: resp.quotes[Math.floor(Math.random() * 100)]\n      })\n    )\n    .catch(error => console.log(error) )\n  }\n  resetQuote = () => {\n    this.setState({\n      chosenQuote: this.state.quotes[Math.floor(Math.random() * 100)] || {\n        quote: \"Sorry, not able to find quotes.\",\n        author: \"N/A\"\n      }\n    })\n  }\n  componentDidMount() {\n    this.fetchQuotes()\n  }\n  render(){\n    return(\n      <section id=\"quote-box\">\n        <article id=\"text\">{this.state.chosenQuote.quote}</article>\n        <article id=\"author\"> - {this.state.chosenQuote.author}</article>\n        <div className=\"button-box\">\n          <a\n              className=\"twitter-share-button\" id=\"tweet-quote\"\n              href={`https://twitter.com/intent/tweet?text=${this.state.chosenQuote.quote} - ${this.state.chosenQuote.author}`}\n              data-size=\"large\"\n              target=\"_blank\"\n              >Tweet\n          </a>\n          <button id=\"new-quote\" onClick={this.resetQuote}>New Quote</button>\n        </div>\n      </section>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport QuoteBox from './QuoteBox.js';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {};\n  }\n  render() {\n    return(\n      <div className=\"App\">\n        <header>\n          <h1>Random Quote Generator</h1>\n        </header>\n        <main>\n          <QuoteBox/>\n        </main>\n        <footer>\n          <p>Made by <a href=\"https://sgonzo3.github.io\">Santos Gonzalez</a></p>\n        </footer>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}